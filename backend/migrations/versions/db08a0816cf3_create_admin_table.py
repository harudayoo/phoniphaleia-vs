"""Create admin table

Revision ID: db08a0816cf3
Revises: 
Create Date: 2025-05-03 17:06:11.218376

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'db08a0816cf3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('votes', schema=None) as batch_op:
        batch_op.drop_index('idx_votes_candidate_id')
        batch_op.drop_index('idx_votes_election_id')
        batch_op.drop_index('idx_votes_student_id')

    op.drop_table('votes')
    with op.batch_alter_table('organizations', schema=None) as batch_op:
        batch_op.drop_index('idx_organizations_college_id')

    op.drop_table('organizations')
    with op.batch_alter_table('candidates', schema=None) as batch_op:
        batch_op.drop_index('idx_candidates_election_id')

    op.drop_table('candidates')
    op.drop_table('positions')
    with op.batch_alter_table('elections', schema=None) as batch_op:
        batch_op.drop_index('idx_elections_org_id')

    op.drop_table('elections')
    with op.batch_alter_table('election_results', schema=None) as batch_op:
        batch_op.drop_index('idx_election_results_candidate_id')
        batch_op.drop_index('idx_election_results_election_id')

    op.drop_table('election_results')
    with op.batch_alter_table('crypto_configs', schema=None) as batch_op:
        batch_op.drop_index('idx_crypto_configs_election_id')

    op.drop_table('crypto_configs')
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.drop_index('idx_audit_logs_election_id')
        batch_op.drop_index('idx_audit_logs_student_id')

    op.drop_table('audit_logs')
    with op.batch_alter_table('key_shares', schema=None) as batch_op:
        batch_op.drop_index('idx_key_shares_authority_id')
        batch_op.drop_index('idx_key_shares_crypto_id')

    op.drop_table('key_shares')
    op.drop_table('trusted_authorities')
    with op.batch_alter_table('admin', schema=None) as batch_op:
        batch_op.add_column(sa.Column('otp_code', sa.String(length=6), nullable=True))
        batch_op.add_column(sa.Column('otp_expires_at', sa.DateTime(), nullable=True))
        batch_op.drop_index('idx_admin_names')
        batch_op.drop_index('idx_admin_username')

    with op.batch_alter_table('voters', schema=None) as batch_op:
        batch_op.alter_column('sex',
               existing_type=sa.CHAR(length=1),
               type_=sa.String(length=1),
               existing_nullable=True)
        batch_op.alter_column('id_metadata',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Text(),
               existing_nullable=True)
        batch_op.drop_index('idx_voters_college_id')
        batch_op.create_unique_constraint(None, ['student_email'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('voters', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_index('idx_voters_college_id', ['college_id'], unique=False)
        batch_op.alter_column('id_metadata',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
        batch_op.alter_column('sex',
               existing_type=sa.String(length=1),
               type_=sa.CHAR(length=1),
               existing_nullable=True)

    with op.batch_alter_table('admin', schema=None) as batch_op:
        batch_op.create_index('idx_admin_username', ['username'], unique=False)
        batch_op.create_index('idx_admin_names', ['lastname', 'firstname'], unique=False)
        batch_op.drop_column('otp_expires_at')
        batch_op.drop_column('otp_code')

    op.create_table('trusted_authorities',
    sa.Column('authority_id', sa.INTEGER(), server_default=sa.text("nextval('trusted_authorities_authority_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('authority_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('contact_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('authority_id', name='trusted_authorities_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('key_shares',
    sa.Column('key_share_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('crypto_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('authority_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('share_value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['authority_id'], ['trusted_authorities.authority_id'], name='key_shares_authority_id_fkey'),
    sa.ForeignKeyConstraint(['crypto_id'], ['crypto_configs.crypto_id'], name='key_shares_crypto_id_fkey'),
    sa.PrimaryKeyConstraint('key_share_id', name='key_shares_pkey')
    )
    with op.batch_alter_table('key_shares', schema=None) as batch_op:
        batch_op.create_index('idx_key_shares_crypto_id', ['crypto_id'], unique=False)
        batch_op.create_index('idx_key_shares_authority_id', ['authority_id'], unique=False)

    op.create_table('audit_logs',
    sa.Column('log_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('election_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('log_time', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['election_id'], ['elections.election_id'], name='audit_logs_election_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['voters.student_id'], name='audit_logs_student_id_fkey'),
    sa.PrimaryKeyConstraint('log_id', name='audit_logs_pkey')
    )
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.create_index('idx_audit_logs_student_id', ['student_id'], unique=False)
        batch_op.create_index('idx_audit_logs_election_id', ['election_id'], unique=False)

    op.create_table('crypto_configs',
    sa.Column('crypto_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('election_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('public_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['election_id'], ['elections.election_id'], name='crypto_configs_election_id_fkey'),
    sa.PrimaryKeyConstraint('crypto_id', name='crypto_configs_pkey')
    )
    with op.batch_alter_table('crypto_configs', schema=None) as batch_op:
        batch_op.create_index('idx_crypto_configs_election_id', ['election_id'], unique=False)

    op.create_table('election_results',
    sa.Column('result_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('election_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('candidate_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('encrypted_vote_total', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('vote_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.candidate_id'], name='election_results_candidate_id_fkey'),
    sa.ForeignKeyConstraint(['election_id'], ['elections.election_id'], name='election_results_election_id_fkey'),
    sa.PrimaryKeyConstraint('result_id', name='election_results_pkey')
    )
    with op.batch_alter_table('election_results', schema=None) as batch_op:
        batch_op.create_index('idx_election_results_election_id', ['election_id'], unique=False)
        batch_op.create_index('idx_election_results_candidate_id', ['candidate_id'], unique=False)

    op.create_table('elections',
    sa.Column('election_id', sa.INTEGER(), server_default=sa.text("nextval('elections_election_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('org_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('election_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('election_desc', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('election_status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.org_id'], name='elections_org_id_fkey'),
    sa.PrimaryKeyConstraint('election_id', name='elections_pkey'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('elections', schema=None) as batch_op:
        batch_op.create_index('idx_elections_org_id', ['org_id'], unique=False)

    op.create_table('positions',
    sa.Column('position_id', sa.INTEGER(), server_default=sa.text("nextval('positions_position_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('org_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('position_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.org_id'], name='positions_org_id_fkey'),
    sa.PrimaryKeyConstraint('position_id', name='positions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('candidates',
    sa.Column('candidate_id', sa.INTEGER(), server_default=sa.text("nextval('candidates_candidate_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('election_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fullname', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('party', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('candidate_desc', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('position_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['election_id'], ['elections.election_id'], name='candidates_election_id_fkey'),
    sa.ForeignKeyConstraint(['position_id'], ['positions.position_id'], name='fk_position'),
    sa.PrimaryKeyConstraint('candidate_id', name='candidates_pkey'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('candidates', schema=None) as batch_op:
        batch_op.create_index('idx_candidates_election_id', ['election_id'], unique=False)

    op.create_table('organizations',
    sa.Column('org_id', sa.INTEGER(), server_default=sa.text("nextval('organizations_org_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('college_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('org_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('org_desc', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['college_id'], ['colleges.college_id'], name='organizations_college_id_fkey'),
    sa.PrimaryKeyConstraint('org_id', name='organizations_pkey'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('organizations', schema=None) as batch_op:
        batch_op.create_index('idx_organizations_college_id', ['college_id'], unique=False)

    op.create_table('votes',
    sa.Column('vote_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('election_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('candidate_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('encrypted_vote', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('zkp_proof', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('verification_receipt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cast_time', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('vote_status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.candidate_id'], name='votes_candidate_id_fkey'),
    sa.ForeignKeyConstraint(['election_id'], ['elections.election_id'], name='votes_election_id_fkey'),
    sa.ForeignKeyConstraint(['student_id'], ['voters.student_id'], name='votes_student_id_fkey'),
    sa.PrimaryKeyConstraint('vote_id', name='votes_pkey')
    )
    with op.batch_alter_table('votes', schema=None) as batch_op:
        batch_op.create_index('idx_votes_student_id', ['student_id'], unique=False)
        batch_op.create_index('idx_votes_election_id', ['election_id'], unique=False)
        batch_op.create_index('idx_votes_candidate_id', ['candidate_id'], unique=False)

    # ### end Alembic commands ###
